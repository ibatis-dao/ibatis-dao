<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fxapp01.dao.TestItemMapper">
    <resultMap type="TestItemDTO" id="TestItemMap">
        <id column="ID" property="id" jdbcType="BIGINT"/>
        <result column="NAME" property="name"/>
    </resultMap>

    <select id="selectTotalRange" databaseId="oracle" resultType="IntRange">
        <!-- database specific minimum number of row and rows count -->
    select 1 as first, count(i.id) as length from tmp$items i
    </select>
    
    <select id="selectTotalRange" databaseId="postgresql" resultType="IntRange">
        <!-- database specific minimum number of row and rows count -->
    select 0 "first", count(id)-1 "length" from public."test02"
    </select>
    
    <!--
    <select id="select" databaseId="postgresql" parameterType="IntRange" resultMap="TestItemMap">
    select id, name
      from test02
     order by id
    offset #{first} limit #{length}
    </select>

    <select id="select" databaseId="oracle" parameterType="IntRange" resultMap="TestItemMap">
    with t001 as (
            select i.id, 
                   i.name
              from tmp$items i 
             order by i.id
          )
    select id, name
      from (
        select rownum as rn, 
               id, 
               name
          from t001
      )
     where rn between #{first} and #{last}
    </select>
    -->
    
    <select id="selectByID" databaseId="oracle" parameterType="BigInteger" resultMap="TestItemMap">
    select i.id, i.name
      from tmp$items i
     where i.id = #{id}
    </select>
    
    <select id="selectByID" databaseId="postgresql" parameterType="BigInteger" resultMap="TestItemMap">
    select id, 
           name 
      from test02
     where id = #{id}
    </select>
    
    <select id="select" databaseId="oracle" parameterType="SQLParams" resultMap="TestItemMap">
    with t001 as (
        select i.id, i.name 
          from tmp$items i
        <where>
            <if test="example != null and example.id != null and example.id != 0">
                id = #{example.id}
            </if>
            <if test="example != null and example.name != null">
                AND name like '%'||#{example.name}||'%'
            </if>
        </where>
        <if test="(sortOrder != null) and (!sortOrder.toString().isEmpty())">
        order by ${sortOrder}
        </if>
    )
    select id, name
      from (
        select rownum as rn, 
               id, 
               name
          from t001
      )
     where rn between #{rowsRange.first} and #{rowsRange.last}
    </select>

    <select id="select" databaseId="postgresql" parameterType="SQLParams" resultMap="TestItemMap">
    select id, name
      from test02
        <where>
            <if test="example != null and example.id != null and example.id != 0">
                id = #{example.id}
            </if>
            <if test="example != null and example.name != null">
                AND name like '%'||#{example.name}||'%'
            </if>
        </where>
        <if test="(sortOrder != null) and (!sortOrder.toString().isEmpty())">
        order by ${sortOrder}
        </if>
    offset #{rowsRange.first} limit #{rowsRange.length}
    </select>

    <insert id="insertRow" databaseId="oracle" statementType="CALLABLE" parameterType="TestItemDTO">
    begin 
      insert into tmp$items(id, name) 
      values (tmp$items_sq.nextval, #{name})
      returning id into #{id,mode=OUT,jdbcType=BIGINT}; 
    end;
    </insert>
    
    <insert id="insertRow" databaseId="postgresql" useGeneratedKeys="true" keyProperty="id" parameterType="TestItemDTO">
    insert into test02 (id, name) 
    values (DEFAULT, #{name})
    </insert>

    <insert id="insertRowBySP" databaseId="oracle" statementType="CALLABLE" parameterType="TestItemDTO">
    begin
        TMP$ITEMS_PKG.insertData(
            #{id,mode=OUT,jdbcType=BIGINT,javaType=BigInteger}, 
            #{name,mode=INOUT,jdbcType=VARCHAR,javaType=java.lang.String}
        );
    end;
    </insert>
    
    <!--
    <select id="insertRowBySP" databaseId="postgresql" statementType="CALLABLE" parameterType="TestItemDTO" resultMap="TestItemMap">
    select * from test02_insertrow(#{id}, #{name}) as t2;
    </select>
    -->
    
    <insert id="insertRowBySP" databaseId="postgresql" statementType="CALLABLE" parameterType="TestItemDTO">
    {#{id,mode=OUT,jdbcType=NUMERIC,javaType=BigInteger} = call test02_insertrow(null, #{name}) } 
    </insert>

    <insert id="insertRowBySP2" databaseId="oracle" statementType="CALLABLE" parameterType="TestItemDTO">
    begin
        TMP$ITEMS_PKG.insertData(
            #{id,mode=OUT,jdbcType=BIGINT,javaType=BigInteger}, 
            #{name,mode=INOUT,jdbcType=VARCHAR,javaType=java.lang.String}
        );
    end;
    </insert>

    <!--
    <select id="insertRowBySP2" databaseId="postgresql" statementType="CALLABLE" parameterType="TestItemDTO" resultMap="TestItemMap">
    select * from test02_insertrow2(ROW(#{id}, #{name})::test02) as t2;
    </select>
    -->

    <insert id="insertRowBySP2" databaseId="postgresql" statementType="CALLABLE" parameterType="TestItemDTO">
    {#{id,mode=OUT,jdbcType=NUMERIC,javaType=BigInteger} = call test02_insertrow2(ROW(null, #{name})::test02) } 
    </insert>
    
    <update id="updateRow" databaseId="postgresql" statementType="CALLABLE" parameterType="TestItemDTO">
    update test02 
       set name = #{name}
     where id = #{id}
    </update>

    <update id="updateRow" databaseId="oracle" statementType="CALLABLE" parameterType="TestItemDTO">
    begin
        TMP$ITEMS_PKG.updateData(
            #{id,mode=INOUT,jdbcType=BIGINT,javaType=BigInteger}, 
            #{name,mode=INOUT,jdbcType=VARCHAR,javaType=java.lang.String}
        );
    end;
    </update>
    
    <delete id="deleteRow" databaseId="postgresql" statementType="CALLABLE" parameterType="TestItemDTO">
    delete from test02 
     where id = #{id}
    </delete>

    <delete id="deleteRow" databaseId="oracle" statementType="CALLABLE" parameterType="TestItemDTO">
    begin
        TMP$ITEMS_PKG.deleteData(
            #{id,mode=IN,jdbcType=BIGINT,javaType=BigInteger}
        );
    end;
    </delete>
    

    <!--  

select * from test02_insertrow(#{id}, #{name}) as t2;    
select * from test02_insertrow(#{id,mode=IN,javaType=BigInteger,jdbcType=BIGINT}, #{name,mode=IN,jdbcType=VARCHAR}) as t2;
    -->
</mapper>